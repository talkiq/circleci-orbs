version: 2.1
description: "Tools for notifying external services about CI events"

orbs:
  slack: circleci/slack@4

executors:
  alpine-latest:
    docker:
      - image: alpine:latest
    resource_class: small

# This command has two conditions:
# - Since it could be too noisy, it MUST be used only on production deploys!
# - It MUST be used as a post-step from a job
commands:
  slack-on-fail:
    description: >
      Uses slack orb to send messages to slack when a job fails.
      Note that if a job uses parallelism or matrix, it will send as many
      messages as jobs executed.
    parameters:
      channel:
        default: ${SLACK_DEFAULT_CHANNEL}
        description: |
          Destination channel for your slack messages.
        type: string
    steps:
      - run:
          name: install curl
          command: |
            if which apk >/dev/null; then
              apk add --no-cache --no-progress curl curl-dev
            elif which apt-get >/dev/null; then
              apt-get update -qy
              apt-get install -qy curl
            else
              echo >&2 "ERROR: could not find supported package manager"
              exit 1
            fi
      - slack/notify:
          channel: <<parameters.channel>>
          custom: |
            {
              "text": "",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Job Failed :x:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "Job name: `${CIRCLE_JOB}`"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Repository name: `${CIRCLE_PROJECT_REPONAME}`"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Branch `${CIRCLE_BRANCH}`"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Blame :point_right: @${CIRCLE_USERNAME}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
          event: fail

jobs:
  datadog:
    description: |
      Creates a datadog event.
    executor: <<parameters.executor>>
    parameters:
      api_key:
        default: DATADOG_API_KEY
        description: |
          Name of the environment variable containing your Datadog API key.
        type: env_var_name
      domain:
        default: "api.datadoghq.com"
        description: |
          Domain name of the Datadog ingestion API.
        type: string
      executor:
        default: alpine-latest
        description: >
          Executor for the job. Must be alpine-based. To use your own custom
          executor, see
          `https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors`.
          Defaults to a small alpine:latest docker image.
        type: executor
      tag:
        default: ""
        description: |
          Tag of event.
        type: string
      text:
        description: |
          Body text of the event.
        type: string
      title:
        description: |
          Title (eg. key) of the event.
        type: string
    steps:
      - run: apk add --no-cache --no-progress curl
      - run: |
          curl -XPOST \
            -H "Content-Type: application/json" \
            -d '{"title": "'"<<parameters.title>>"'", "text": "'"<<parameters.text>>"'", "tags": ["'"<<parameters.tag>>"'"], "alert_type": "success"}' \
            "https://<<parameters.domain>>/api/v1/events?api_key=${<<parameters.api_key>>}"

  sentry-deployment:
    description: |
      Creates a new release deployment in Sentry. Should be run after the release has been created.
    executor: <<parameters.executor>>
    parameters:
      environment:
        default: ${CIRCLE_TAG}
        description: |
          The environment for which the release applies.
        type: string
      executor:
        default: alpine-latest
        description: >
          Executor for the job. Must be alpine-based. To use your own custom
          executor, see
          `https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors`.
          Defaults to a small alpine:latest docker image.
        type: executor
      organization:
        default: ${CIRCLE_PROJECT_USERNAME}
        description: |
          The name of the project's organization (on Sentry).
        type: string
      token:
        default: SENTRY_TOKEN
        description: |
          Name of the environment variable containing your Sentry API token.
        type: env_var_name
      version:
        default: ${CIRCLE_SHA1:0:10}
        description: |
          Newly-released version.
        type: string
    steps:
      - run: apk add --no-cache --no-progress curl
      - run: |
          curl -XPOST \
            -H "Authorization: Bearer ${<<parameters.token>>}" \
            -H "Content-Type: application/json" \
            -d '{"environment": "'"<<parameters.environment>>"'"}' \
            "https://sentry.io/api/0/organizations/<<parameters.organization>>/releases/<<parameters.version>>/deploys/"

  sentry-release:
    description: |
      Creates a new release in Sentry.
    executor: <<parameters.executor>>
    parameters:
      commit:
        default: ${CIRCLE_SHA1}
        description: |
          The git commit SHA for the new release.
        type: string
      executor:
        default: alpine-latest
        description: >
          Executor for the job. Must be alpine-based. To use your own custom
          executor, see
          `https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors`.
          Defaults to a small alpine:latest docker image.
        type: executor
      prev_commit:
        default: ''
        description: |
          The git commit SHA for the previous release.
        type: string
      organization:
        default: ${CIRCLE_PROJECT_USERNAME}
        description: |
          The name of the project's organization (on Sentry).
        type: string
      project:
        default: ${CIRCLE_PROJECT_REPONAME}
        description: |
          The name of the project (on Sentry).
        type: string
      repository:
        default: ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}
        description: |
          The repository containing the referenced commits.
        type: string
      token:
        default: SENTRY_TOKEN
        description: |
          Name of the environment variable containing your Sentry API token.
        type: env_var_name
      version:
        default: ${CIRCLE_SHA1:0:10}
        description: |
          Newly-released version.
        type: string
    steps:
      - run: apk add --no-cache --no-progress curl
      - run: |
          curl -XPOST \
            -H "Authorization: Bearer ${<<parameters.token>>}" \
            -H "Content-Type: application/json" \
            -d '{
                  "version": "'"<<parameters.version>>"'",
                  "ref": "'"<<parameters.commit>>"'",
                  "refs": [{
                    "repository": "'"<<parameters.repository>>"'",
                    "commit":"'"<<parameters.commit>>"'",
                    "previousCommit":"'"<<parameters.prev_commit>>"'"
                  }],
                  "projects": ["'"<<parameters.project>>"'"]
                }' \
            "https://sentry.io/api/0/organizations/<<parameters.organization>>/releases/"

  slack-on-deploy:
    description: |
      Uses thekevjames/slack-notifier to send a deployment notification to your workspace.
    executor: <<parameters.executor>>
    parameters:
      changes:
        default: ''
        description: |
          The (optional) changelog for this release.
        type: string
      diff_url:
        default: ${CIRCLE_COMPARE_URL}
        description: |
          A link to the changeset for this release.
        type: string
      environment:
        default: ${CIRCLE_TAG}
        description: |
          The environment being deployed.
        type: string
      executor:
        default: alpine-latest
        description: >
          Executor for the job. Must be alpine-based. To use your own custom
          executor, see
          `https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors`.
          Defaults to a small alpine:latest docker image.
        type: executor
      prev_version:
        default: unknown
        description: |
          Previously-released version.
        type: string
      project:
        default: ${CIRCLE_PROJECT_REPONAME}
        description: |
          The name of the project.
        type: string
      user:
        default: "@${CIRCLE_USERNAME}"
        description: |
          User responsible for this release.
        type: string
      version:
        default: ${CIRCLE_SHA1:0:10}
        description: |
          Newly-released version.
        type: string
      webhook:
        default: ${SLACK_DEPLOYBOT_WEBHOOK}
        description: |
          Destination webhook URL.
        type: string
    steps:
      - run: apk add --no-cache --no-progress curl
      - run: curl https://raw.githubusercontent.com/TheKevJames/tools/master/slack-notifier/send-deploy-notif.sh > /send-deploy-notif.sh
      - run: |
          sh /send-deploy-notif.sh \
            -c "<<parameters.changes>>" \
            -d "<<parameters.diff_url>>" \
            -e "<<parameters.environment>>" \
            -n "<<parameters.project>>" \
            -p "<<parameters.prev_version>>" \
            -u "<<parameters.user>>" \
            -v "<<parameters.version>>" \
            -w "<<parameters.webhook>>"

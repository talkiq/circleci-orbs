version: 2.1
description: "Tools for running deployment commands"

jobs:
  gemfury:
    description: >
      Deploy a package to Gemfury (ie. for internal usage only). Use PyPI for
      OSS projects!
    docker:
      - image: python:<<parameters.python_version>>
    resource_class: <<parameters.resource_class>>
    parameters:
      folder:
        default: '.'
        description: >
          Path to the folder containing the Python package.
        type: string
      gemfury_token:
        default: GEMFURY_TOKEN
        description: >
          Name of the env var containing the Gemfury token.
        type: env_var_name
      python_version:
        description: >
          Python version to use to build and deploy the package. Used as the
          docker executor, so you can use any sort of tag (eg. ``3.7.4-slim``).
        type: string
      resource_class:
        default: small
        type: string
      verify_version:
        default: ${CIRCLE_TAG}
        description: >
          If set to a non-empty value, fails the deployment if the version
          being deployed does not match. Can be used as a last-step sanity
          check.
        type: string
      should_upgrade_pip:
        type: boolean
        default: false
    steps:
      - checkout
      - when:
          condition: <<parameters.should_upgrade_pip>>
          steps:
            - run: python3 -m pip install --upgrade pip
      - run:
          name: Validate tag format for pip
          shell: /usr/local/bin/python
          command: |
            import os
            from pip._vendor.packaging.version import Version
            tag = os.environ['CIRCLE_TAG']
            v = Version(tag)
            assert tag == str(v), f'Original tag ({tag}) should have been {str(v)}'
            assert v.is_devrelease or not v.local, f'tag should not contain \'+{v.local}\' unless dev version'
      - run: python3 -m pip install wheel
      - run: cd "<<parameters.folder>>" && python3 setup.py sdist bdist_wheel
      - run:
          name: verify tag builds match deploy version
          command: |
            if [[ ! -z "<<parameters.verify_version>>" ]]; then
                code_version=$(find "<<parameters.folder>>/dist" -iname '*.tar.gz' | awk -F- '{sub(/\.tar\.gz/, ""); print $NF}')
                code_version_alt="${code_version/.dev/-dev.}"
                if [[ <<parameters.verify_version>> != ${code_version} &&
                      <<parameters.verify_version>> != ${code_version_alt} ]]; then
                    echo "Version ${code_version} does not match tag ${CIRCLE_TAG}"
                    exit 1
                fi
            fi
      - run: ls "<<parameters.folder>>/dist" | xargs -I{} curl -F package=@<<parameters.folder>>/dist/{} https://${<<parameters.gemfury_token>>}@push.fury.io/talkiq/

version: 2.1
description: "Tools for running gcloud commands."

commands:
  auth:
    description: >
      Authenticate the Google Cloud SDK with GCP.
    parameters:
      creds:
        default: GCLOUD_SERVICE_KEY
        description: >
          Name of environment variable storing the base64-encoded service key
          for the GCP project.
        type: env_var_name
      project:
        description: The Google project ID to connect with via the gcloud CLI.
        type: string
      zone:
        default: ""
        type: string
    steps:
      - run: echo "${<<parameters.creds>>}" | base64 -d > /key.json
      - run: gcloud auth activate-service-account --key-file=/key.json
      - run: gcloud --quiet config set project "<<parameters.project>>"
      - when:
          condition: <<parameters.zone>>
          steps:
            - run: gcloud --quiet config set zone "<<parameters.zone>>"

  configure-docker:
    description: >
      Configure a local docker client with authentication to GCR. Requires you
      to have already run gcloud/auth.
    parameters:
      docker_layer_caching:
        default: false
        description: >
          If enabled, turns on CircleCI's docker_layer_caching which makes
          builds faster by skipping steps that have not changed.
        type: boolean
    steps:
      - when:
          condition: <<parameters.docker_layer_caching>>
          steps:
            - setup_remote_docker:
                version: 20.10.6
                docker_layer_caching: true
      - unless:
          condition: <<parameters.docker_layer_caching>>
          steps:
            - setup_remote_docker:
                version: 20.10.6
      - run: gcloud auth configure-docker --quiet

  configure-gke:
    description: >
      Configure kubectl pointing to a given cluster in a given zone/region.
      Requires you to have already run gcloud/auth.
    parameters:
      cluster:
        type: string
      zone:
        type: string
    steps:
      - run: echo y | gcloud components install kubectl
      - run: gcloud config set container/cluster <<parameters.cluster>>
      - run: gcloud container clusters get-credentials <<parameters.cluster>> --zone=<<parameters.zone>>

  install:
    description: >
      Install the Google Cloud SDK on a supported executor. Currently supported
      package managers: apk, apt-get.
    steps:
      - run:
          name: install dependencies
          command: |
            if which apk >/dev/null; then
              apk add --no-cache --no-progress bash curl curl-dev python3
            elif which apt-get >/dev/null; then
              apt-get update -qy
              apt-get install -qy bash curl python
            else
              echo >&2 "ERROR: could not find supported package manager"
              exit 1
            fi
      - run: curl -sSL https://sdk.cloud.google.com | bash -s -- --disable-prompts
      - run: ln -s /root/google-cloud-sdk/bin/gcloud /usr/bin/gcloud
      - run: ln -s /root/google-cloud-sdk/bin/gsutil /usr/bin/gsutil
      - run: ln -s /root/google-cloud-sdk/bin/docker-credential-gcloud /usr/bin/docker-credential-gcloud

  patch-configmap-entry:
    description: >
      Update (or add) an entry in a configmap as a raw blob. Preserves all
      other entries.
    parameters:
      configmap:
        description: >
          Name of the target k8s configmap.
        type: string
      entry_data:
        description: >
          File that contains the entry data.
        type: string
      entry_name:
        description: >
          Name of the entry in the configmap which exists under the top-level
          "data" entry.
        type: string
    steps:
      - run:
          name: construct configmap patch file
          command: |
            # Avoid escaping issues by using input data as raw (|) directly
            # from file. Must indent raw config (using sed here).
            echo -e "data:\n  <<parameters.entry_name>>: |\n$(sed 's/^\(.*\)/    \1/g' <<parameters.entry_data>>)" > patch.yaml
      - run:
          name: patch entry in configmap
          command: |
            kubectl patch configmap/<<parameters.configmap>> \
              --type merge -p "$(cat patch.yaml)"

  force-redeploy-gke:
    description: >
      Force a k8s deployment to redeploy, which causes all pods to be
      recreated.
    parameters:
      deployment:
        description: >
          Name of the k8s deployment.
        type: string
    steps:
      - run:
          name: poke deployment to force a redeploy
          command: |
            kubectl patch deployment <<parameters.deployment>> \
              -p '{"spec":{"template":{"metadata":{"annotations":{"date":"'$(date +'%s')'"}}}}}'

  artifacts-package-publish:
    description: >
      This command will publish an already built package to a GCP package
      repository. Command requires python3 to be present.
    parameters:
      creds:
        default: GCLOUD_SERVICE_KEY
        description: >
          Name of environment variable storing the base64-encoded service key
          for the GCP project.
        type: env_var_name
      files:
        default: '*'
        description: >
          Glob pattern of files to upload
        type: string
      path:
        default: .
        description: >
          Path to the directory containing your packages.
        type: string
      project:
        description: >
          Name of GCP project to which we will push.
        type: string
      repository-url:
        description: >
          URL of GCP package repository to which we will push.
        type: string
    steps:
      - run: python3 -m pip install twine keyring keyrings.google-artifactregistry-auth
      - auth:
          creds: <<parameters.creds>>
          project: <<parameters.project>>
      - run: |
          unset TWINE_PASSWORD
          unset TWINE_USERNAME
          unset TWINE_REPOSITORY
          unset TWINE_REPOSITORY_URL
          unset TWINE_CERT
          unset TWINE_NON_INTERACTIVE
          twine upload --repository-url <<parameters.repository-url>> <<parameters.path>>/<<parameters.files>>

jobs:
  deploy-cloud-function:
    description: >
      Deploy a package to Google's Cloud Function service.
    docker:
      - image: google/cloud-sdk:alpine
    resource_class: <<parameters.resource_class>>
    parameters:
      creds:
        default: GCLOUD_SERVICE_KEY
        description: >
          Name of environment variable storing the base64-encoded service key
          for the GCP project.
        type: env_var_name
      funcname:
        description: >
          Name of the cloud function being deployed.
        type: string
      packagename:
        description: >
          Name of the package to be deployed to this cloud function. This package should be a .zip
        type: string
      project:
        description: >
          Name of GCP project to which we will push.
        type: string
      resource_class:
        default: small
        type: string
      memory:
        description: >
          Limit on the amount of memory the function can use. Allowed values are: 128MB, 256MB, 512MB, 1024MB, and 2048MB.
        default: 128MB
        type: string
    steps:
      - auth:
          creds: <<parameters.creds>>
          project: <<parameters.project>>
      - run: apk add --no-cache --no-progress zip
      - checkout
      - run:
          name: package function source as zip and upload to gcs
          command: |
            cd functions/
            cp "./<<parameters.packagename>>/requirements.txt" requirements.txt
            cp "./<<parameters.packagename>>/mains/<<parameters.funcname>>.py" main.py
            sed -i "s/\${GEMFURY_TOKEN}/$GEMFURY_TOKEN/g" requirements.txt
            zip -r "<<parameters.funcname>>.zip" "./<<parameters.packagename>>"/* main.py requirements.txt
            gsutil cp "<<parameters.funcname>>.zip" "gs://<<parameters.project>>-cloud-function-zips/<<parameters.packagename>>/"
      - run: |
          gcloud functions deploy <<parameters.funcname>> --memory=<<parameters.memory>> \
            --source="gs://<<parameters.project>>-cloud-function-zips/<<parameters.packagename>>/<<parameters.funcname>>.zip"

  deploy-cloud-run:
    description: >
      Deploy a container to either Google's managed Cloud Run service or to a
      specified Knative cluster.
    docker:
      - image: google/cloud-sdk:alpine
    resource_class: <<parameters.resource_class>>
    parameters:
      creds:
        default: GCLOUD_SERVICE_KEY
        description: >
          Name of environment variable storing the base64-encoded service key
          for the GCP project.
        type: env_var_name
      cluster:
        default: ''
        description: >
          If set, deploys to a Knative cluster rather than using the managed
          Cloud Run service.
        type: string
      cpu:
        default: '1'
        description: >
          CPU to be allocated to our cloud run container.
        type: string
      deployment:
        description: >
          Name of deployment to-be-updated.
        type: string
      # TODO: Find a better way to do this. CircleCI does not have a list
      # type yet: https://ideas.circleci.com/ideas/CCI-I-701
      env_vars:
        default: ''
        description: >
          Evironment variables to be passed into the cloud run container.
        type: string
      image:
        default: ${CIRCLE_PROJECT_REPONAME}
        description: >
          Name of the target image. Note that this will be prepended by the
          project name (eg. <<parameters.project>>), so the full path your
          image will be pushed to will look like:
          <<parameters.registry>>/<<parameters.project>>/<<parameters.image>>.
        type: string
      managed_flags:
        description: >
          Flags to pass to the `gcloud run deploy` command. Will only be used
          for managed deploys (eg. Cloud Run rather than Knative).
        default: --no-allow-unauthenticated
        type: string
      memory:
        description: >
          Memory to be allocated to our cloud run container, measured in Mi.
        default: 128Mi
        type: string
      project:
        description: >
          Name of GCP project to which we will push.
        type: string
      region:
        description: >
          Name of GCP region to which we will push.
        type: string
      resource_class:
        default: small
        type: string
    steps:
      - auth:
          creds: <<parameters.creds>>
          project: <<parameters.project>>
      - unless:
          condition: <<parameters.cluster>>
          steps:
            - run: |
                gcloud run deploy <<parameters.deployment>> \
                  --platform=managed <<parameters.managed_flags>> \
                  --image="gcr.io/<<parameters.project>>/<<parameters.image>>:${CIRCLE_SHA1:0:10}" \
                  --cpu=<<parameters.cpu>> \
                  --memory=<<parameters.memory>> \
                  --region=<<parameters.region>> \
                  --set-env-vars <<parameters.env_vars>> &> output
            - run: |
                gcloud run services update-traffic <<parameters.deployment>> \
                  --platform=managed \
                  --region=<<parameters.region>> \
                  --to-latest
      - when:
          condition: <<parameters.cluster>>
          steps:
            - run: |
                gcloud run deploy <<parameters.deployment>> \
                  --platform=gke \
                  --image "gcr.io/<<parameters.project>>/<<parameters.image>>:${CIRCLE_SHA1:0:10}" \
                  --cpu=<<parameters.cpu>> \
                  --memory=<<parameters.memory>> \
                  --cluster=<<parameters.cluster>> \
                  --cluster-location=<<parameters.region>> \
                  --namespace=<<parameters.project>> \
                  --set-env-vars <<parameters.env_vars>> &> output
            - run: |
                gcloud run services update-traffic <<parameters.deployment>> \
                  --platform=gke \
                  --cluster=<<parameters.cluster>> \
                  --cluster-location=<<parameters.region>> \
                  --namespace=<<parameters.project>> \
                  --to-latest
      - run:
          name: cat output
          command: cat output
          when: always

  deploy-gke:
    description: >
      Deploy a k8s deployment to GKE via provided YAML. Will record the
      previous deployment version in a workspace.
    docker:
      - image: google/cloud-sdk:alpine
    parameters:
      cluster:
        type: string
      creds:
        type: env_var_name
      deployment:
        description:
          Name of your deployment. If you are using multi-deployment
          autoscaling this may correspond to multiple actual k8s deployments.
        type: string
      k8s_yaml:
        description: >
          The k8s YAML file for your deployment(s).
        type: string
      project:
        type: string
      prune_selector:
        description: >
          A k8s label selector to identify the k8s deployments that are
          relevant to this deploy step, and prune those that aren't present in
          the k8s YAML. Default is not to prune.
        type: string
        default: ""
      version_selector:
        description: >
          A k8s label selector to identify which deployment should be recorded
          as the previous deployment version for release notifications. If not
          specified, the deployment name is used.
        type: string
        default: ""
      zone:
        type: string
    steps:
      - auth:
          creds: <<parameters.creds>>
          project: <<parameters.project>>
      - configure-gke:
          cluster: <<parameters.cluster>>
          zone: <<parameters.zone>>
      - run: mkdir -p /metadata/prev_version/<<parameters.deployment>>
      - when:
          condition: <<parameters.version_selector>>
          steps:
            - run:
                name: store previous version
                command: |
                  # Get the deployment image from the currently deployed k8s
                  # manifest, parse out the tag as the last (3rd) chunk of img, and
                  # further split the tag to retrieve the rightmost chunk: the commit
                  # hash.
                  kubectl get deployments -l <<parameters.version_selector>> -oyaml | awk '/image: / {split($0,img,":"); len=split(img[3],tag,"-"); print tag[len]}' | tail -n1 > /metadata/prev_version/<<parameters.deployment>>/<<parameters.zone>>
      - unless:
          condition: <<parameters.version_selector>>
          steps:
            - run:
                name: store previous version
                command: |
                  kubectl get deployments <<parameters.deployment>> -oyaml | awk '/image: / {split($0,img,":"); len=split(img[3],tag,"-"); print tag[len]}' | tail -n1 > /metadata/prev_version/<<parameters.deployment>>/<<parameters.zone>>
      - when:
          condition: <<parameters.prune_selector>>
          steps:
            - run:
                name: deploy to k8s cluster
                command: |
                  kubectl apply -f <<parameters.k8s_yaml>> --prune -l <<parameters.prune_selector>>
      - unless:
          condition: <<parameters.prune_selector>>
          steps:
            - run:
                name: deploy to k8s cluster
                command: |
                  kubectl apply -f <<parameters.k8s_yaml>>
      - persist_to_workspace:
          root: /metadata
          paths:
            - prev_version/<<parameters.deployment>>/<<parameters.zone>>

  docker-publish:
    description: >
      A variation of the docker/publish job, pre-parametrized for GCR builds.
      This job will build, tag, and push a docker image. It will be tagged with
      all relevant metadata, eg. commit hash, branch (if this is a branch
      build), tag (if this is a tag build), and "latest".
    docker:
      - image: <<parameters.executor>>
    resource_class: <<parameters.resource_class>>
    parameters:
      build_args:
        default: ''
        description: >
          Extra flags to pass to docker build.
        type: string
      git_repository_url:
        default: ''
        description: >
          If unset, uses the current repository. Otherwise, clones the provided
          repo's default branch to a depth of 1.
        type: string
      creds:
        default: GCLOUD_SERVICE_KEY
        description: >
          Name of environment variable storing the base64-encoded service key
          for the GCP project.
        type: env_var_name
      docker_layer_caching:
        default: false
        description: >
          If enabled, turns on CircleCI's docker_layer_caching which makes
          builds faster by skipping steps that have not changed.
        type: boolean
      dockerfile:
        default: Dockerfile
        description: >
          Name of dockerfile to use.
        type: string
      executor:
        default: docker:20.10.6-git
        description: >
          Name of the docker image to use to execute the job.
        type: string
      image:
        default: ${CIRCLE_PROJECT_REPONAME}
        description: >
          Name of the target image. Note that this will be prepended by the
          project name (eg. <<parameters.project>>), so the full path your
          image will be pushed to will look like:
          <<parameters.registry>>/<<parameters.project>>/<<parameters.image>>.
        type: string
      path:
        default: .
        description: >
          Path to the build context directory containing your Dockerfile.
        type: string
      project:
        description: >
          Name of GCP project to which we will push.
        type: string
      registry:
        default: 'gcr.io'
        description: >
          Container registry to-be-used.
        type: string
      resource_class:
        default: medium
        type: string
      workspace:
        default: ''
        description: >
          If specified, attaches the specified workspace and copies it into the
          Docker context before building.
        type: string
    steps:
      - install
      - auth:
          creds: <<parameters.creds>>
          project: <<parameters.project>>
      - configure-docker:
          docker_layer_caching: <<parameters.docker_layer_caching>>
      - when:
          condition: <<parameters.git_repository_url>>
          steps:
            - run: git clone --depth=1 <<parameters.git_repository_url>>
      - unless:
          condition: <<parameters.git_repository_url>>
          steps:
            - checkout
      - docker/build:
          build_args: <<parameters.build_args>>
          dockerfile: <<parameters.dockerfile>>
          path: <<parameters.path>>
          workspace: <<parameters.workspace>>
      - docker/tag:
          image: <<parameters.project>>/<<parameters.image>>
          registry: <<parameters.registry>>
      - docker/push:
          image: <<parameters.project>>/<<parameters.image>>
          registry: <<parameters.registry>>

orbs:
  docker: talkiq/docker@2

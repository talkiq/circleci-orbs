version: 2.1
description: "Tools for running gcloud commands."

commands:
  auth:
    description: >
      Authenticate the Google Cloud SDK with GCP.
    parameters:
      creds:
        default: GCLOUD_SERVICE_KEY
        description: >
          Name of environment variable storing the base64-encoded service key
          for the GCP project.
        type: env_var_name
      project:
        description: The Google project ID to connect with via the gcloud CLI.
        type: string
      zone:
        default: ""
        type: string
    steps:
      - run: echo "${<<parameters.creds>>}" | base64 -d > /key.json
      - run: gcloud auth activate-service-account --key-file=/key.json
      - run: gcloud --quiet config set project "<<parameters.project>>"
      - when:
          condition: <<parameters.zone>>
          steps:
            - run: gcloud --quiet config set zone "<<parameters.zone>>"

  configure-docker:
    description: >
      Configure a local docker client with authentication to GCR. Requires you
      to have already run gcloud/auth.
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - run: gcloud auth configure-docker --quiet

  configure-gke:
    description: >
      Configure kubectl pointing to a given cluster in a given zone/region.
      Requires you to have already run gcloud/auth.
    parameters:
      cluster:
        type: string
      zone:
        type: string
    steps:
      - run: echo y | gcloud components install kubectl
      - run: gcloud config set container/cluster <<parameters.cluster>>
      - run: gcloud container clusters get-credentials <<parameters.cluster>> --zone=<<parameters.zone>>

  install:
    description: >
      Install the Google Cloud SDK on a supported executor. Currently supported
      package managers: apk, apt-get.
    steps:
      - run:
          name: install dependencies
          command: |
            if which apk >/dev/null; then
              apk add --no-cache --no-progress bash curl curl-dev python
            elif which apt-get >/dev/null; then
              apt-get update -qy
              apt-get install -qy bash curl python
            else
              echo >&2 "ERROR: could not find supported package manager"
              exit 1
            fi
      - run: curl -sSL https://sdk.cloud.google.com | bash -s -- --disable-prompts
      - run: ln -s /root/google-cloud-sdk/bin/gcloud /usr/bin/gcloud
      - run: ln -s /root/google-cloud-sdk/bin/gsutil /usr/bin/gsutil
      - run: ln -s /root/google-cloud-sdk/bin/docker-credential-gcloud /usr/bin/docker-credential-gcloud

jobs:
  deploy-cloud-function:
    description: >
      Deploy a package to Google's Cloud Function service.
    docker:
      - image: google/cloud-sdk:alpine
    resource_class: <<parameters.resource_class>>
    parameters:
      creds:
        default: GCLOUD_SERVICE_KEY
        description: >
          Name of environment variable storing the base64-encoded service key
          for the GCP project.
        type: env_var_name
      funcname:
        description: >
          Name of the cloud function being deployed.
        type: string
      packagename:
        description: >
          Name of the package to be deployed to this cloud function. This package should be a .zip
        type: string
      project:
        description: >
          Name of GCP project to which we will push.
        type: string
      resource_class:
        default: small
        type: string
    steps:
      - auth:
          creds: <<parameters.creds>>
          project: <<parameters.project>>
      - run: apk add --no-cache --no-progress zip
      - checkout
      - run:
          name: package function source as zip and upload to gcs
          command: |
            cd functions/
            cp "./<<parameters.packagename>>/requirements.txt" requirements.txt
            cp "./<<parameters.packagename>>/mains/<<parameters.funcname>>.py" main.py
            sed -i "s/\${GEMFURY_TOKEN}/$GEMFURY_TOKEN/g" requirements.txt
            zip -r "<<parameters.funcname>>.zip" "./<<parameters.packagename>>"/* main.py requirements.txt
            gsutil cp "<<parameters.funcname>>.zip" "gs://<<parameters.project>>-cloud-function-zips/<<parameters.packagename>>/"
      - run: |
          gcloud functions deploy <<parameters.funcname>> \
            --source="gs://<<parameters.project>>-cloud-function-zips/<<parameters.packagename>>/<<parameters.funcname>>.zip"

  deploy-cloud-run:
    description: >
      Deploy a container to either Google's managed Cloud Run service or to a
      specified Knative cluster.
    docker:
      - image: google/cloud-sdk:alpine
    resource_class: <<parameters.resource_class>>
    parameters:
      creds:
        default: GCLOUD_SERVICE_KEY
        description: >
          Name of environment variable storing the base64-encoded service key
          for the GCP project.
        type: env_var_name
      cluster:
        default: ''
        description: >
          If set, deploys to a Knative cluster rather than using the managed
          Cloud Run service.
        type: string
      cpu:
        default: '1'
        description: >
          CPU to be allocated to our cloud run container.
        type: string
      deployment:
        description: >
          Name of deployment to-be-updated.
        type: string
      # TODO: Find a better way to do this. CircleCI does not have a list
      # type yet: https://ideas.circleci.com/ideas/CCI-I-701
      env_vars:
        description: >
          Evironment variables to be passed into the cloud run container.
        type: string
      image:
        default: ${CIRCLE_PROJECT_REPONAME}
        description: >
          Name of the target image. Note that this will be prepended by the
          project name (eg. <<parameters.project>>), so the full path your
          image will be pushed to will look like:
          <<parameters.registry>>/<<parameters.project>>/<<parameters.image>>.
        type: string
      managed_flags:
        description: >
          Flags to pass to the `gcloud run deploy` command. Will only be used
          for managed deploys (eg. Cloud Run rather than Knative).
        default: --no-allow-unauthenticated
        type: string
      memory:
        description: >
          Memory to be allocated to our cloud run container, measured in Mi.
        default: 128Mi
        type: string
      project:
        description: >
          Name of GCP project to which we will push.
        type: string
      region:
        description: >
          Name of GCP region to which we will push.
        type: string
      resource_class:
        default: small
        type: string
    steps:
      - auth:
          creds: <<parameters.creds>>
          project: <<parameters.project>>
      - unless:
          condition: <<parameters.cluster>>
          steps:
            - run: |
                gcloud run deploy <<parameters.deployment>> \
                  --platform=managed <<parameters.managed_flags>> \
                  --image="gcr.io/<<parameters.project>>/<<parameters.image>>:${CIRCLE_SHA1:0:10}" \
                  --cpu=<<parameters.cpu>> \
                  --memory=<<parameters.memory>> \
                  --region=<<parameters.region>> \
                  --set-env-vars <<parameters.env_vars>> &> output
            - run: |
                gcloud run services update-traffic <<parameters.deployment>> \
                  --platform=managed \
                  --region=<<parameters.region>> \
                  --to-latest
      - when:
          condition: <<parameters.cluster>>
          steps:
            - run: |
                gcloud run deploy <<parameters.deployment>> \
                  --platform=gke \
                  --image "gcr.io/<<parameters.project>>/<<parameters.image>>:${CIRCLE_SHA1:0:10}" \
                  --cpu=<<parameters.cpu>> \
                  --memory=<<parameters.memory>> \
                  --cluster=<<parameters.cluster>> \
                  --cluster-location=<<parameters.region>> \
                  --namespace=<<parameters.project>> \
                  --set-env-vars <<parameters.env_vars>> &> output
            - run: |
                gcloud run services update-traffic <<parameters.deployment>> \
                  --platform=gke \
                  --cluster=<<parameters.cluster>> \
                  --cluster-location=<<parameters.region>> \
                  --namespace=<<parameters.project>> \
                  --to-latest
      - run:
          name: cat output
          command: cat output
          when: always

  deploy-gke:
    description: >
      Deploy a given image in GCR to GKE. Can be used in a lightweight "only
      update the image" mode if ``from_template`` is unset (which will then not
      need to checkout the source code) or do a "full deployment" by using
      ``./bin/interpolate-k8s`` to build a ``k8s.yaml`` file otherwise.
    docker:
      - image: google/cloud-sdk:alpine
    resource_class: <<parameters.resource_class>>
    parameters:
      creds:
        default: GCLOUD_SERVICE_KEY
        description: >
          Name of environment variable storing the base64-encoded service key
          for the GCP project.
        type: env_var_name
      cluster:
        type: string
      deployment:
        description: >
          Name of deployment to-be-updated.
        type: string
      from_template:
        default: false
        description: >
          If enabled, checks out the code and uses ``./bin/interpolate-k8s`` to
          do a full deployment from the k8s yaml template. Otherwise, simply
          updated the image hash of the deployment.
        type: boolean
      template_path:
        type: string
        default: ./k8s.yaml.j2
        description: >
          Path to container specs file for use in ``./bin/interpolate-k8s``.
      image:
        default: ${CIRCLE_PROJECT_REPONAME}
        description: >
          Name of the target image. Note that this will be prepended by the
          project name (eg. <<parameters.project>>), so the full path your
          image will be pushed to will look like:
          <<parameters.registry>>/<<parameters.project>>/<<parameters.image>>.
        type: string
      project:
        description: >
          Name of GCP project to which we will push.
        type: string
      registry:
        default: 'gcr.io'
        description: >
          Container registry to-be-used.
        type: string
      resource_class:
        default: small
        type: string
      tag:
        default: ${CIRCLE_SHA1:0:10}
        description: >
          Tag to-be-deployed.
        type: string
      zone:
        type: string
    steps:
      - when:
          condition: <<parameters.from_template>>
          steps:
            - checkout
      - auth:
          creds: <<parameters.creds>>
          project: <<parameters.project>>
      - configure-gke:
          cluster: <<parameters.cluster>>
          zone: <<parameters.zone>>
      - run: mkdir -p /metadata/prev_version/<<parameters.deployment>>
      - run:
          name: store previous version
          command: |
            kubectl get deployment <<parameters.deployment>> -oyaml \
                | awk '/image: / {split($0,img,":"); print img[3]}' > /metadata/prev_version/<<parameters.deployment>>/<<parameters.zone>> \
                || echo 'unknown' > /metadata/prev_version/<<parameters.deployment>>/<<parameters.zone>>
      - when:
          condition: <<parameters.from_template>>
          steps:
            - run: python3 -m ensurepip
            - run: python3 -m pip install "docopt<1" "jinja2<3"
            - run: python3 ./bin/interpolate-k8s --deployment="<<parameters.deployment>>" --template="<<parameters.template_path>>" "gcr.io/<<parameters.project>>/<<parameters.image>>" "<<parameters.tag>>" "$(kubectl get deployments <<parameters.deployment>> --template={{.status.replicas}})" | kubectl apply -f -
      - unless:
          condition: <<parameters.from_template>>
          steps:
            - run: kubectl set image deployment/<<parameters.deployment>> <<parameters.deployment>>="gcr.io/<<parameters.project>>/<<parameters.image>>:<<parameters.tag>>" --record=true
      - persist_to_workspace:
          root: /metadata
          paths:
            - prev_version/<<parameters.deployment>>/<<parameters.zone>>

  docker-publish:
    description: >
      A variation of the docker/publish job, pre-parametrized for GCR builds.
      This job will build, tag, and push a docker image. It will be tagged with
      all relevant metadata, eg. commit hash, branch (if this is a branch
      build), tag (if this is a tag build), and "latest".
    docker:
      - image: <<parameters.executor>>
    resource_class: <<parameters.resource_class>>
    parameters:
      build_args:
        default: ''
        description: >
          Extra flags to pass to docker build.
        type: string
      creds:
        default: GCLOUD_SERVICE_KEY
        description: >
          Name of environment variable storing the base64-encoded service key
          for the GCP project.
        type: env_var_name
      dockerfile:
        default: Dockerfile
        description: >
          Name of dockerfile to use.
        type: string
      executor:
        default: docker:18.09.3-git
        description: >
          Name of the docker image to use to execute the job.
        type: string
      image:
        default: ${CIRCLE_PROJECT_REPONAME}
        description: >
          Name of the target image. Note that this will be prepended by the
          project name (eg. <<parameters.project>>), so the full path your
          image will be pushed to will look like:
          <<parameters.registry>>/<<parameters.project>>/<<parameters.image>>.
        type: string
      path:
        default: .
        description: >
          Path to the build context directory containing your Dockerfile.
        type: string
      project:
        description: >
          Name of GCP project to which we will push.
        type: string
      registry:
        default: 'gcr.io'
        description: >
          Container registry to-be-used.
        type: string
      resource_class:
        default: medium
        type: string
      workspace:
        default: ''
        description: >
          If specified, attaches the specified workspace and copies it into the
          Docker context before building.
        type: string
    steps:
      - install
      - auth:
          creds: <<parameters.creds>>
          project: <<parameters.project>>
      - configure-docker
      - checkout
      - docker/build:
          build_args: <<parameters.build_args>>
          dockerfile: <<parameters.dockerfile>>
          path: <<parameters.path>>
          workspace: <<parameters.workspace>>
      - docker/tag:
          image: <<parameters.project>>/<<parameters.image>>
          registry: <<parameters.registry>>
      - docker/push:
          image: <<parameters.project>>/<<parameters.image>>
          registry: <<parameters.registry>>

orbs:
  docker: talkiq/docker@1

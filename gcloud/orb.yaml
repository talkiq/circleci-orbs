version: 2.1
description: "Tools for running gcloud commands."

executors:
  docker-latest:
    docker:
      - image: docker:git
    resource_class: medium
  gcloud-alpine-latest:
    docker:
      - image: google/cloud-sdk:alpine
    resource_class: small

commands:
  auth:
    description: >
      Authenticate the Google Cloud SDK with GCP.
    parameters:
      creds:
        default: GCLOUD_SERVICE_KEY
        description: >
          Name of environment variable storing the base64-encoded service key
          for the GCP project.
        type: env_var_name
      project:
        description: The Google project ID to connect with via the gcloud CLI.
        type: string
      zone:
        default: ""
        type: string
    steps:
      - run: echo "${<<parameters.creds>>}" | base64 -d > /key.json
      - run: gcloud auth activate-service-account --key-file=/key.json
      - run: gcloud --quiet config set project "<<parameters.project>>"
      - when:
          condition: <<parameters.zone>>
          steps:
            - run: gcloud --quiet config set zone "<<parameters.zone>>"

  configure-docker:
    description: >
      Configure a local docker client with authentication to GCR. Requires you
      to have already run gcloud/auth.
    parameters:
      docker_layer_caching:
        default: false
        description: >
          If enabled, turns on CircleCI's docker_layer_caching which makes
          builds faster by skipping steps that have not changed.
        type: boolean
      version:
        default: 20.10.6
        description: >
          The docker server version to be provisioned. See the docs for
          available versions:
          https://circleci.com/docs/2.0/building-docker-images/#docker-version
        type: string
    steps:
      - setup_remote_docker:
          version: <<parameters.version>>
          docker_layer_caching: <<parameters.docker_layer_caching>>
      - run: gcloud auth configure-docker --quiet

  configure-gke:
    description: >
      Configure kubectl pointing to a given cluster in a given zone/region.
      Requires you to have already run gcloud/auth.
    parameters:
      cluster:
        type: string
      kubectl_version:
        default: "gcloud-latest"
        description: |
          kubectl version to be installed. Defaults to "gcloud-latest", ie. the
          version returned by installing as a gcloud component. You can specify
          the version string (eg. "v1.21.3") or "latest" to get a different
          version without going through gcloud components.
        type: string
      zone:
        type: string
    steps:
      - when:
          condition:
            equal: [ <<parameters.kubectl_version>>, "gcloud-latest" ]
          steps:
            - run: gcloud components install --quiet kubectl
            - run: ln -s /root/google-cloud-sdk/bin/kubectl /usr/local/bin/kubectl
      - when:
          condition:
            equal: [ <<parameters.kubectl_version>>, "latest" ]
          steps:
            - run: curl -Lso/tmp/kubectl-version https://dl.k8s.io/release/stable.txt
            - run: curl -Lo/tmp/kubectl "https://dl.k8s.io/release/$(cat /tmp/kubectl-version)/bin/linux/amd64/kubectl"
            - run: install -o root -g root -m 0755 /tmp/kubectl /usr/local/bin/kubectl
      - when:
          condition:
            not:
              or:
                - equal: [ <<parameters.kubectl_version>>, "gcloud-latest" ]
                - equal: [ <<parameters.kubectl_version>>, "latest" ]
          steps:
            - run: curl -Lo/tmp/kubectl "https://dl.k8s.io/release/<<parameters.kubectl_version>>/bin/linux/amd64/kubectl"
            - run: install -o root -g root -m 0755 /tmp/kubectl /usr/local/bin/kubectl
      - run: kubectl version --client
      - run: gcloud config set container/cluster <<parameters.cluster>>
      - run: gcloud container clusters get-credentials <<parameters.cluster>> --zone=<<parameters.zone>>

  install:
    description: >
      Install the Google Cloud SDK on a supported executor. Currently supported
      package managers: apk, apt-get.
    parameters:
      version:
        # N.B. version 376.0.0 (currently latest) is broken on musl systems, as
        # it contains a glibc shared object.
        default: '375.0.0'
        description: >
          Version of gcloud to install. Set to "latest" or a specified version
          such as "375.0.0".
        type: string
    steps:
      - run:
          name: install dependencies
          command: |
            if which apk >/dev/null; then
              apk add --no-cache --no-progress bash curl python3
            elif which apt-get >/dev/null; then
              apt-get update -qy
              apt-get install -qy bash curl python
            else
              echo >&2 "ERROR: could not find supported package manager"
              exit 1
            fi
      - when:
          condition:
            equal: [ <<parameters.version>>, "latest" ]
          steps:
            - run:
                name: install gcloud
                command: |
                  if [ ! -d /root/google-cloud-sdk ]; then
                    curl -sSL https://sdk.cloud.google.com | bash -s -- --disable-prompts
                  fi
      - when:
          condition:
            not:
              equal: [ <<parameters.version>>, "latest" ]
          steps:
            # This is basically the same as running:
            #   curl -sSL https://sdk.cloud.google.com | bash -s -- --disable-prompts
            # The only difference here is in the sed commands:
            # * remove some unnecessary >10k line verbose logging, and
            # * download a specified version of gcloud
            - run:
                name: install gcloud
                command: |
                  if [ ! -d /root/google-cloud-sdk ]; then
                    scratch="$(mktemp -d -t tmp.XXXXXXXXXX)"
                    curl -sSLo "${scratch}/install.sh" https://dl.google.com/dl/cloudsdk/channels/rapid/install_google_cloud_sdk.bash
                    sed -i 's/-zxvf/-zxf/' "${scratch}/install.sh"
                    sed -i 's#^__SDK_URL_DIR=\(.*\)$#__SDK_URL_DIR=\1/downloads#' "${scratch}/install.sh"
                    sed -i 's/^__SDK_TGZ.*$/__SDK_TGZ="google-cloud-sdk-<<parameters.version>>-linux-x86_64.tar.gz"/' "${scratch}/install.sh"
                    bash "${scratch}/install.sh" --disable-prompts
                  fi
      - run:
          name: symlink gcloud
          command: |
            if [ ! -f /usr/bin/gcloud ]; then
              ln -s /root/google-cloud-sdk/bin/gcloud /usr/bin/gcloud
            fi
      - run:
          name: symlink gsutil
          command: |
            if [ ! -f /usr/bin/gsutil ]; then
              ln -s /root/google-cloud-sdk/bin/gsutil /usr/bin/gsutil
            fi
      - run:
          name: symlink docker-credential-gcloud
          command: |
            if [ ! -f /usr/bin/docker-credential-gcloud ]; then
              ln -s /root/google-cloud-sdk/bin/docker-credential-gcloud /usr/bin/docker-credential-gcloud
            fi

  patch-configmap-entry:
    description: >
      Update (or add) an entry in a configmap as a raw blob. Preserves all
      other entries.
    parameters:
      configmap:
        description: >
          Name of the target k8s configmap.
        type: string
      entry_data:
        description: >
          File that contains the entry data.
        type: string
      entry_name:
        description: >
          Name of the entry in the configmap which exists under the top-level
          "data" entry.
        type: string
    steps:
      - run:
          name: construct configmap patch file
          command: |
            # Avoid escaping issues by using input data as raw (|) directly
            # from file. Must indent raw config (using sed here).
            echo -e "data:\n  <<parameters.entry_name>>: |\n$(sed 's/^\(.*\)/    \1/g' <<parameters.entry_data>>)" > patch.yaml
      - run:
          name: patch entry in configmap
          command: |
            kubectl patch configmap/<<parameters.configmap>> \
              --type merge -p "$(cat patch.yaml)"

  force-redeploy-gke:
    description: >
      Force a k8s deployment to redeploy, which causes all pods to be
      recreated.
    parameters:
      deployment:
        description: >
          Name of the k8s deployment.
        type: string
    steps:
      - run:
          name: poke deployment to force a redeploy
          command: |
            kubectl patch deployment <<parameters.deployment>> \
              -p '{"spec":{"template":{"metadata":{"annotations":{"date":"'$(date +'%s')'"}}}}}'

  # TODO: deprecate, covered by poetry/publish
  artifacts-package-publish:
    description: >
      This command will publish an already built package to a GCP package
      repository. Command requires python3 to be present.
    parameters:
      creds:
        default: GCLOUD_SERVICE_KEY
        description: >
          Name of environment variable storing the base64-encoded service key
          for the GCP project.
        type: env_var_name
      files:
        default: '*'
        description: >
          Glob pattern of files to upload
        type: string
      path:
        default: .
        description: >
          Path to the directory containing your packages.
        type: string
      project:
        description: >
          Name of GCP project to which we will push.
        type: string
      repository-url:
        description: >
          URL of GCP package repository to which we will push.
        type: string
    steps:
      - run: python3 -m pip install twine keyring keyrings.google-artifactregistry-auth
      - auth:
          creds: <<parameters.creds>>
          project: <<parameters.project>>
      - run: |
          unset TWINE_PASSWORD
          unset TWINE_USERNAME
          unset TWINE_REPOSITORY
          unset TWINE_REPOSITORY_URL
          unset TWINE_CERT
          unset TWINE_NON_INTERACTIVE
          twine upload --repository-url <<parameters.repository-url>> <<parameters.path>>/<<parameters.files>>

  overwrite-gcs-folder:
    description: >
      Delete and overwrite a folder within a GCS bucket. Assumes you've already
      run auth and install.
    parameters:
      bucket:
        description: >
          Name of GCS bucket.
        type: string
      path:
        description: >
          Path of folder within bucket.
        type: string
      src:
        description: >
          Source folder to copy.
        type: string
    steps:
      - run:
          name: nuke pre-existing folder
          command: |
            gsutil -m rm -r gs://<<parameters.bucket>>/<<parameters.path>>/ ||:
      - run: gsutil -m cp -r <<parameters.src>>/* gs://<<parameters.bucket>>/<<parameters.path>>/

jobs:
  deploy-cloud-function:
    description: >
      Deploy a package to Google's Cloud Function service.
    executor: <<parameters.executor>>
    parameters:
      creds:
        default: GCLOUD_SERVICE_KEY
        description: >
          Name of environment variable storing the base64-encoded service key
          for the GCP project.
        type: env_var_name
      executor:
        default: gcloud-alpine-latest
        description: >
          Executor for the job. Must be alpine-based and have a working gcloud
          version installed. To use your own custom executor, see
          `https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors`.
          Defaults to a small google/cloud-sdk:alpine docker image.
        type: executor
      funcname:
        description: >
          Name of the cloud function being deployed.
        type: string
      memory:
        default: ''
        description: >
          Limit on the amount of memory the function can use. Allowed values
          are: 128MB, 256MB, 512MB, 1024MB, and 2048MB.
        type: string
      packagename:
        description: >
          Name of the package to be deployed to this cloud function.
        type: string
      project:
        description: >
          Name of GCP project to which we will push.
        type: string
    steps:
      - run: apk add --no-cache --no-progress py3-pip zip
      - poetry/install
      - auth:
          creds: <<parameters.creds>>
          project: <<parameters.project>>
      - run: poetry self add keyrings.google-artifactregistry-auth
      - checkout
      - run:
          name: generate requirements
          command: poetry export -frequirements.txt -orequirements.txt --without-hashes --with-credentials
          working_directory: functions/<<parameters.packagename>>
      - run:
          name: restructure files for target package
          command: |
            mkdir -p /tmp/build
            cp "./<<parameters.packagename>>/requirements.txt" requirements.txt
            cp "./<<parameters.packagename>>/mains/<<parameters.funcname>>.py" main.py
            cp -R "./<<parameters.packagename>>" main.py requirements.txt /tmp/build
          working_directory: functions
      - when:
          condition: <<parameters.memory>>
          steps:
            - run: |
                gcloud functions deploy <<parameters.funcname>> --memory=<<parameters.memory>> \
                  --source="/tmp/build"
      - unless:
          condition: <<parameters.memory>>
          steps:
            - run: |
                gcloud functions deploy <<parameters.funcname>> --source="/tmp/build"

  deploy-cloud-run:
    description: >
      Deploy a container to either Google's managed Cloud Run service or to a
      specified Knative cluster.
    executor: <<parameters.executor>>
    parameters:
      creds:
        default: GCLOUD_SERVICE_KEY
        description: >
          Name of environment variable storing the base64-encoded service key
          for the GCP project.
        type: env_var_name
      cluster:
        default: ''
        description: >
          If set, deploys to a Knative cluster rather than using the managed
          Cloud Run service.
        type: string
      cpu:
        default: '1'
        description: >
          CPU to be allocated to our cloud run container.
        type: string
      deployment:
        description: >
          Name of deployment to-be-updated.
        type: string
      # TODO: Find a better way to do this. CircleCI does not have a list
      # type yet: https://ideas.circleci.com/ideas/CCI-I-701
      env_vars:
        default: ''
        description: >
          Evironment variables to be passed into the cloud run container.
        type: string
      executor:
        default: gcloud-alpine-latest
        description: >
          Executor for the job. Must have a working gcloud version installed.
          To use your own custom executor, see
          `https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors`.
          Defaults to a small google/cloud-sdk:alpine docker image.
        type: executor
      image:
        default: ${CIRCLE_PROJECT_REPONAME}
        description: >
          Name of the target image. Note that this will be prepended by the
          project name (eg. <<parameters.project>>), so the full path your
          image will be pushed to will look like:
          <<parameters.registry>>/<<parameters.project>>/<<parameters.image>>.
        type: string
      managed_flags:
        description: >
          Flags to pass to the `gcloud run deploy` command. Will only be used
          for managed deploys (eg. Cloud Run rather than Knative).
        default: --no-allow-unauthenticated
        type: string
      memory:
        description: >
          Memory to be allocated to our cloud run container, measured in Mi.
        default: 128Mi
        type: string
      project:
        description: >
          Name of GCP project to which we will push.
        type: string
      region:
        description: >
          Name of GCP region to which we will push.
        type: string
    steps:
      - auth:
          creds: <<parameters.creds>>
          project: <<parameters.project>>
      - unless:
          condition: <<parameters.cluster>>
          steps:
            - run: |
                gcloud run deploy <<parameters.deployment>> \
                  --platform=managed <<parameters.managed_flags>> \
                  --image="gcr.io/<<parameters.project>>/<<parameters.image>>:${CIRCLE_SHA1:0:10}" \
                  --cpu=<<parameters.cpu>> \
                  --memory=<<parameters.memory>> \
                  --region=<<parameters.region>> \
                  --set-env-vars <<parameters.env_vars>> &> output
            - run: |
                gcloud run services update-traffic <<parameters.deployment>> \
                  --platform=managed \
                  --region=<<parameters.region>> \
                  --to-latest
      - when:
          condition: <<parameters.cluster>>
          steps:
            - run: |
                gcloud run deploy <<parameters.deployment>> \
                  --platform=gke \
                  --image "gcr.io/<<parameters.project>>/<<parameters.image>>:${CIRCLE_SHA1:0:10}" \
                  --cpu=<<parameters.cpu>> \
                  --memory=<<parameters.memory>> \
                  --cluster=<<parameters.cluster>> \
                  --cluster-location=<<parameters.region>> \
                  --namespace=<<parameters.project>> \
                  --set-env-vars <<parameters.env_vars>> &> output
            - run: |
                gcloud run services update-traffic <<parameters.deployment>> \
                  --platform=gke \
                  --cluster=<<parameters.cluster>> \
                  --cluster-location=<<parameters.region>> \
                  --namespace=<<parameters.project>> \
                  --to-latest
      - run:
          name: cat output
          command: cat output
          when: always

  deploy-gke:
    description: >
      Deploy a k8s deployment to GKE via provided YAML. Will record the
      previous deployment version in a workspace.
    executor: <<parameters.executor>>
    parameters:
      cluster:
        type: string
      creds:
        type: env_var_name
      deployment:
        description:
          Name of your deployment. If you are using multi-deployment
          autoscaling this may correspond to multiple actual k8s deployments.
        type: string
      executor:
        default: gcloud-alpine-latest
        description: >
          Executor for the job. Must have a working gcloud version installed.
          To use your own custom executor, see
          `https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors`.
          Defaults to a small google/cloud-sdk:alpine docker image.
        type: executor
      k8s_yaml:
        description: >
          The k8s YAML file for your deployment(s).
        type: string
      project:
        type: string
      prune_selector:
        description: >
          A k8s label selector to identify the k8s deployments that are
          relevant to this deploy step, and prune those that aren't present in
          the k8s YAML. Default is not to prune.
        type: string
        default: ""
      version_selector:
        description: >
          A k8s label selector to identify which deployment should be recorded
          as the previous deployment version for release notifications. If not
          specified, the deployment name is used.
        type: string
        default: ""
      zone:
        type: string
    steps:
      - auth:
          creds: <<parameters.creds>>
          project: <<parameters.project>>
      - configure-gke:
          cluster: <<parameters.cluster>>
          zone: <<parameters.zone>>
      - run: mkdir -p /metadata/prev_version/<<parameters.deployment>>
      - when:
          condition: <<parameters.version_selector>>
          steps:
            - run:
                name: store previous version
                command: |
                  # Get the deployment image from the currently deployed k8s
                  # manifest, parse out the tag as the last (3rd) chunk of img, and
                  # further split the tag to retrieve the rightmost chunk: the commit
                  # hash.
                  kubectl get deployments -l <<parameters.version_selector>> -oyaml | awk '/image: / {split($0,img,":"); len=split(img[3],tag,"-"); print tag[len]}' | tail -n1 > /metadata/prev_version/<<parameters.deployment>>/<<parameters.zone>>
      - unless:
          condition: <<parameters.version_selector>>
          steps:
            - run:
                name: store previous version
                command: |
                  kubectl get deployments <<parameters.deployment>> -oyaml | awk '/image: / {split($0,img,":"); len=split(img[3],tag,"-"); print tag[len]}' | tail -n1 > /metadata/prev_version/<<parameters.deployment>>/<<parameters.zone>>
      - when:
          condition: <<parameters.prune_selector>>
          steps:
            - run:
                name: deploy to k8s cluster
                command: |
                  kubectl apply -f <<parameters.k8s_yaml>> --prune -l <<parameters.prune_selector>>
      - unless:
          condition: <<parameters.prune_selector>>
          steps:
            - run:
                name: deploy to k8s cluster
                command: |
                  kubectl apply -f <<parameters.k8s_yaml>>
      - persist_to_workspace:
          root: /metadata
          paths:
            - prev_version/<<parameters.deployment>>/<<parameters.zone>>

  docker-publish:
    description: >
      A variation of the docker/publish job, pre-parametrized for GCR builds.
      This job will build, tag, and push a docker image. It will be tagged with
      all relevant metadata, eg. commit hash, branch (if this is a branch
      build), tag (if this is a tag build), and "latest".
    executor: <<parameters.executor>>
    parameters:
      build_args:
        default: ''
        description: >
          Extra flags to pass to docker build.
        type: string
      creds:
        default: GCLOUD_SERVICE_KEY
        description: >
          Name of environment variable storing the base64-encoded service key
          for the GCP project.
        type: env_var_name
      docker_layer_caching:
        default: false
        description: >
          If enabled, turns on CircleCI's docker_layer_caching which makes
          builds faster by skipping steps that have not changed.
        type: boolean
      dockerfile:
        default: Dockerfile
        description: >
          Name of dockerfile to use.
        type: string
      executor:
        default: docker-latest
        description: >
          Executor for the job. Must support docker-in-docker and have a
          working git command installed. To use your own custom executor, see
          `https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors`.
          Defaults to a medium docker:git docker image.
        type: executor
      git_repository_url:
        default: ''
        description: >
          If unset, uses the current repository. Otherwise, clones the provided
          repo's default branch to a depth of 1.
        type: string
      image:
        default: ${CIRCLE_PROJECT_REPONAME}
        description: >
          Name of the target image. Note that this will be prepended by the
          project name (eg. <<parameters.project>>), so the full path your
          image will be pushed to will look like:
          <<parameters.registry>>/<<parameters.project>>/<<parameters.image>>.
        type: string
      path:
        default: .
        description: >
          Path to the build context directory containing your Dockerfile.
        type: string
      project:
        description: >
          Name of GCP project to which we will push.
        type: string
      registry:
        default: 'gcr.io'
        description: >
          Container registry to-be-used.
        type: string
      workspace:
        default: ''
        description: >
          If specified, attaches the specified workspace and copies it into the
          Docker context before building.
        type: string
    steps:
      - install
      - auth:
          creds: <<parameters.creds>>
          project: <<parameters.project>>
      - configure-docker:
          docker_layer_caching: <<parameters.docker_layer_caching>>
      - when:
          condition: <<parameters.git_repository_url>>
          steps:
            - run: git clone --depth=1 <<parameters.git_repository_url>>
      - unless:
          condition: <<parameters.git_repository_url>>
          steps:
            - checkout
      - docker/build:
          build_args: <<parameters.build_args>>
          dockerfile: <<parameters.dockerfile>>
          path: <<parameters.path>>
          workspace: <<parameters.workspace>>
      - docker/tag:
          image: <<parameters.project>>/<<parameters.image>>
          registry: <<parameters.registry>>
      - docker/push:
          image: <<parameters.project>>/<<parameters.image>>
          registry: <<parameters.registry>>

orbs:
  docker: talkiq/docker@3
  poetry: talkiq/poetry@4
